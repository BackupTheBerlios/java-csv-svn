package diergo.array;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Iterator;

import diergo.util.transform.Transformer;

/**
 * A reader to read lines. Each line will become an array generated by a
 * {@link Transformer}.
 */
public class ArrayLineReader<E>
    implements ArrayReader<E>, Iterable<E[]>
{
  public static <E> Iterable<E[]> read(Reader in, Transformer<String, E[]> parser)
  {
    return new ArrayLineReader<E>(in, parser);
  }

  private final BufferedReader _in;
  protected final Transformer<String, E[]> _parser;

  public ArrayLineReader(Reader in, Transformer<String, E[]> parser)
  {
    _in = in instanceof BufferedReader ? (BufferedReader) in : new BufferedReader(in);
    _parser = parser;
  }

  public E[] read()
      throws IOException
  {
    String line = readLine();
    try {
      return line == null ? null : _parser.transform(line);
    } catch (IllegalArgumentException e) {
      throw new IOException("Cannot read line: " + e.getMessage());
    }
  }

  private String readLine()
      throws IOException
  {
    String line = null;
    while ((line = _in.readLine()) != null) {
      if (!line.startsWith("#")) {
        return line;
      }
    }
    ;
    return null;
  }

  /**
   * Allows reading by an iterable to be used by {@code for}.
   * 
   * @see ArrayReaderIterator
   */
  public Iterator<E[]> iterator()
  {
    return new ArrayReaderIterator<E>(this);
  }

  /**
   * Closes the underlying reader.
   */
  public void close()
      throws IOException
  {
    _in.close();
  }
}
