package diergo.array;

import java.io.IOException;
import java.io.Writer;

import diergo.util.aggregate.AbstractAggregator;
import diergo.util.transform.Transformer;

/**
 * A writer to write arrays to. Each array will become one line generated by a
 * {@link Transformer}.
 */
public class ArrayLineWriter<E>
    extends AbstractAggregator<E[], Writer>
    implements ArrayWriter<E>
{
  public static <E> Writer write(Iterable<? extends E[]> source, Transformer<E[], String> generator, Writer out)
  {
    return aggregate(source, new ArrayLineWriter<E>(out, generator));
  }

  private final Writer _out;
  protected final Transformer<E[], String> _generator;
  protected boolean _linesWritten;

  public ArrayLineWriter(Writer out, Transformer<E[], String> generator)
  {
    _out = out;
    _generator = generator;
    _linesWritten = false;
  }

  public void write(E... values)
      throws IOException
  {
    if (_linesWritten) {
      _out.append('\n');
    }
    try {
      _out.write(_generator.transform(values));
    } finally {
      _linesWritten = true;
    }
  }

  public void close()
      throws IOException
  {
    _out.close();
  }

  public Writer getAggregated()
  {
    return _out;
  }

  public void process(E[] source)
  {
    try {
      write(source);
    } catch (IOException e) {
      throw new IllegalStateException(e.getMessage());
    }
  }
}
